import { handleCoverLetter } from './routes/cover-letter';
import { handleResume } from './routes/resume';
import { z } from 'zod';

// Placeholder types for Durable Objects until full implementations are added.
type DurableObjectState = any;

/**
 * Cloudflare Worker handling AI-driven cover letter and resume generation.
 */

/**
 * Schema describing the request payload expected for cover letter generation.
 */
const CoverLetterRequestSchema = z.object({
  job_title: z.string().min(1),
  company_name: z.string().min(1),
  hiring_manager_name: z.string().min(1).optional(),
  job_description_text: z.string().min(1),
  candidate_career_summary: z.string().min(1),
});
type CoverLetterRequestBody = z.infer<typeof CoverLetterRequestSchema>;

/**
 * Represents structured cover letter content returned by the AI model.
 */
interface CoverLetterContent {
  salutation: string;
  opening_paragraph: string;
  body_paragraph_1: string;
  body_paragraph_2: string;
  closing_paragraph: string;
}

/**
 * Schema describing the request payload for resume generation.
 */
const ResumeRequestSchema = z.object({
  job_title: z.string().min(1),
  company_name: z.string().min(1),
  job_description_text: z.string().min(1),
  candidate_career_summary: z.string().min(1),
});
type ResumeRequestBody = z.infer<typeof ResumeRequestSchema>;

/**
 * Represents structured resume content returned by the AI model.
 */
interface ResumeContent {
  summary: string;
  experience_bullets: string[];
  skills: string[];
}

// The `Env` interface is auto-generated by Wrangler (see worker-configuration.d.ts)

/**
 * Durable Object coordinating crawling operations for a specific site.
 */
export class SiteCrawler {
  /**
   * Creates a new SiteCrawler instance.
   * @param state - Durable Object state reference.
   * @param env - Worker environment bindings.
   */
  constructor(state: DurableObjectState, env: Env) {}

  /**
   * Placeholder fetch handler for future SiteCrawler APIs.
   * @param req - Incoming request object.
   */
  async fetch(req: Request) {
    return new Response('Not implemented', { status: 501 });
  }
}

/**
 * Durable Object responsible for monitoring individual job postings.
 */
export class JobMonitor {
  /**
   * Creates a new JobMonitor instance.
   * @param state - Durable Object state reference.
   * @param env - Worker environment bindings.
   */
  constructor(state: DurableObjectState, env: Env) {}

  /**
   * Placeholder fetch handler for future JobMonitor APIs.
   * @param req - Incoming request object.
   */
  async fetch(req: Request) {
    return new Response('Not implemented', { status: 501 });
  }
}

/**
 * Workflow stub for job discovery.
 */
export class DiscoveryWorkflow {}

/**
 * Workflow stub for ongoing job monitoring.
 */
export class JobMonitorWorkflow {}

/**
 * Workflow stub for analyzing changes in job postings.
 */
export class ChangeAnalysisWorkflow {}

const routes: Record<string, (request: Request, env: Env) => Promise<Response>> = {
  '/api/cover-letter': handleCoverLetter,
  '/api/resume': handleResume,
};

export default {
  /**
   * Main fetch handler routing API requests.
   * @param request - Incoming HTTP request.
   * @param env - Worker environment bindings.
   */
  async fetch(request: Request, env: Env): Promise<Response> {
    if (request.method !== 'POST') {
      return new Response('Expected POST request', { status: 405 });
    }

    const url = new URL(request.url);
    const handler = routes[url.pathname];

    if (handler) {
      return await handler(request, env);
    }

    return new Response('Not Found', { status: 404 });
  },
};
